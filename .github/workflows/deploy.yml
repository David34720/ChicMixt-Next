name: Deploy to VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      
      - name: Network diagnostics
        run: |
          echo "Running nmap scan..."
          sudo nmap -p${{ secrets.SSH_PORT }} -Pn ${{ secrets.SSH_HOST }}
          
      - name: Test SSH connection with full debug
        run: |
          ssh -vvv -o ConnectTimeout=10 \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 2>&1 || true

      - name: Install telnet
        run: sudo apt-get install -y telnet

      - name: Test with telnet
        run: |
          echo "Testing telnet connection..."
          timeout 5 telnet ${{ secrets.SSH_HOST }} ${{ secrets.SSH_PORT }} 2>&1 || true
          
      - name: Detailed SSH verbose connection
        run: |
          ssh -vvv -o ConnectTimeout=5 -o BatchMode=yes -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 2>&1 || true

      - name: Echo SSH Host (masked)
        run: |
          echo "Testing connection to host ending with: $(echo ${{ secrets.SSH_HOST }} | sed 's/.*\([0-9]\{1,3\}\.[0-9]\{1,3\}\)$/\1/')"
          echo "On port: ${{ secrets.SSH_PORT }}"
          
      - name: Test connection with timeout
        run: |
          timeout 10 bash -c '</dev/tcp/${{ secrets.SSH_HOST }}/${{ secrets.SSH_PORT }}' && echo "Port is open" || echo "Port is closed"

      - name: Debug SSH connection
        run: |
          echo "Testing connection to ${{ secrets.SSH_HOST }} on port ${{ secrets.SSH_PORT }}"
          nc -zv ${{ secrets.SSH_HOST }} ${{ secrets.SSH_PORT }} -w 5
          
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Debug SSH key
        run: |
          ssh-add -l
          ssh -v -o StrictHostKeyChecking=no -p "${{ secrets.SSH_PORT }}" ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} 'echo "SSH connection successful"'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install PNPM globally
        run: npm install -g pnpm

      - name: Test SSH Connection Stability
        run: |
          ssh -o ServerAliveInterval=10 -o ServerAliveCountMax=3 -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "echo 'SSH connection stable'"

      - name: Deploy to VPS
        run: |
          ssh -o StrictHostKeyChecking=no -p "${{ secrets.SSH_PORT }}" ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<'EOF'
            cd /var/www/chicmixt
            # Sauvegarde temporaire de la DB de production dans /tmp pour éviter les conflits Git
            if [ -f prisma/dev.db ]; then
              mv prisma/dev.db /tmp/dev.db.temp
            fi
            git pull origin main
            # Restaure la DB si elle a été sauvegardée
            if [ -f /tmp/dev.db.temp ]; then
              mv /tmp/dev.db.temp prisma/dev.db
            fi
            pnpm install
            pnpm prisma generate
            pnpm prisma migrate deploy
            pnpm run build
            pnpm run build:server
            npx pm2 restart ecosystem.config.js
          EOF
